"============================================================================
" 共通設定
"============================================================================
"----------------------------------------------------------------------------
" 一般
"----------------------------------------------------------------------------
" カレントディレクトリ内のファイル .vimrc, .exrc や .gvimrc 等の
" 読み込みを有効にする。
set exrc
" コマンド :autocmd やシェルコマンド、書き込みコマンドがカレントディレクトリ
" 内のファイル .vimrc や  .exrc では使用できなくなり、マッピングコマンドも
" 表示されるようになる。これは 'exrc' を有効にしているため設定している。
"set secure
" コマンドライン補完を行う。TAB、Ctrl-P/N で選択する。
set wildmenu
" マウスはノーマルモードとビジュアルモードで使う。
"set mouse=nv

" modeline を有効にする。NOTE: CVE-2007-2438
set modelines=5

"----------------------------------------------------------------------------
" 表示関連
"----------------------------------------------------------------------------
" 暗い背景色のターミナルとする。
"set background=dark
" コマンドラインに使われる画面上の行数。
set cmdheight=2
" ルーラーを表示する。
set ruler
" list コマンドによる表示をカスタマイズ。
set lcs=tab:>-,eol:$,trail:-

"----------------------------------------------------------------------------
" 検索関連
"----------------------------------------------------------------------------
" インクリメンタルサーチを行う。
set incsearch
" 検索パターンが存在するとき、それにマッチするテキストを全てハイライトする。
set hlsearch
" 検索ハイライトを ESC連打で消す
nmap <silent> <Esc><Esc> :nohlsearch<CR><Esc>

"----------------------------------------------------------------------------
" 編集関連
"----------------------------------------------------------------------------
" (自動)インデントの各段階に使われる空白の数。
set shiftwidth=4
" ファイル内の <Tab> が対応する空白の数。
set tabstop=4
"  <Tab> や <BS> を打ち込んだときにカーソルが動く幅。
set softtabstop=4
"  挿入モードで <Tab> を挿入するとき、代わりに適切な数の空白を使う。
set expandtab
" 自動的に改行されないようにする(Kaoriya版のデフォルト設定回避)
autocmd FileType text setlocal textwidth=0
" TAB 文字入力の切り替えキーの設定。
nmap <silent> <F6> :set expandtab!<CR>
" CTRL-X CTRL-K の補完に使う辞書。
set dictionary=/usr/share/dict/words
" [[, ]] で中央に表示させる。
nmap [[ [[z.
nmap ]] ]]z.
" t,T の動作を ge,gE (後方の単語の最後へ) に変更。
nmap t ge
nmap T gE
" Visual モードで連続して数字のインクリメント可能に。
vnoremap <C-A> <C-A>gv
vnoremap <C-X> <C-X>gv
"----------------------------------------------------------------------------
" バッファ管理関連
"----------------------------------------------------------------------------
" バッファが放棄されるときに隠れ状態にする。
set hidden
" Ctrl+J/K でバッファ切り替え
nmap <C-j> :bp<CR>
nmap <C-k> :bn<CR>
" PageUp/Down でもバッファ切り替え
nmap <PageUp> :bp<CR>
nmap <PageDown> :bn<CR>
nmap <DEL> :bd<CR>
" CTRL-^ が使えない PC のために CTRL-\ で代用する。
nmap <C-\> :e #<CR>

"----------------------------------------------------------------------------
" タブページ関連
"----------------------------------------------------------------------------
" Ctrl+P/N でタブ切り替え
nmap <C-p> :tabp<CR>
nmap <C-n> :tabn<CR>
" ファイルはタブに読み込む(差分モードを除く)
"let blacklist = ['help']
"autocmd BufReadPost * echo "ft=".&ft
"if (&diff == 0)
"    autocmd BufReadPost *
"        \ if index(blacklist, &ft) < 0 |
"        \   tab ball |
"        \ endif
"endif

"----------------------------------------------------------------------------
" ファイル関連
"----------------------------------------------------------------------------
" ファイル名やパス名に使われる文字を指定する。gf とかに使われる。
" #,: を抜いておく。
set isfname-=#
set isfname-=:
" gf をデフォルトで行番号指定付きにする。
nmap gf gF
" :cd CTRL-X でカレントディレクトリに移動できるようにする。
cmap <c-x> <c-r>=expand('%:p:h')<CR>/
" バックアップファイルは作らない
set nobackup
" スワップファイルも作らない
set noswapfile
" undo ファイルは作る(永続化)
set undofile
"set undodir=/var/tmp

"----------------------------------------------------------------------------
" 構文解析関連(ハイライト、整形、折りたたみ)
"----------------------------------------------------------------------------
" 構文ハイライトを有効にする。
syntax enable
" 対応するカッコの強調表示を行う標準プラグインをロードしない。
let loaded_matchparen=1
" 編集開始時に常に全ての折り畳みを開いておく。
set foldlevelstart=99
" /* */ のコメントと { } のブロックが折り畳まれないようにする。
let c_no_comment_fold=1
"自動整形機能を一部OFF(コメント開始文字の自動挿入)
"ここでは効果無い
"set formatoptions-=ro

" 追加のハイライト定義
autocmd ColorScheme *
  \ hi RedBold     term=bold cterm=bold ctermfg=Red     gui=bold guifg=Red     |
  \ hi GreenBold   term=bold cterm=bold ctermfg=Green   gui=bold guifg=Green   |
  \ hi BlueBold    term=bold cterm=bold ctermfg=Blue    gui=bold guifg=Blue    |
  \ hi YellowBold  term=bold cterm=bold ctermfg=Yellow  gui=bold guifg=Yellow  |
  \ hi CyanBold    term=bold cterm=bold ctermfg=Cyan    gui=bold guifg=Cyan    |
  \ hi MagentaBold term=bold cterm=bold ctermfg=Magenta gui=bold guifg=Magenta |
  \ hi GrayBold    term=bold cterm=bold ctermfg=Gray    gui=bold guifg=Gray    |
  \ hi Gray        ctermfg=Gray        guifg=Gray                              |
  \ hi DarkRed     ctermfg=DarkRed     guifg=DarkRed                           |
  \ hi DarkGreen   ctermfg=DarkGreen   guifg=DarkGreen                         |
  \ hi DarkBlue    ctermfg=DarkBlue    guifg=DarkBlue                          |
  \ hi DarkYellow  ctermfg=DarkYellow  guifg=DarkYellow                        |
  \ hi DarkCyan    ctermfg=DarkCyan    guifg=DarkCyan                          |
  \ hi DarkMagenta ctermfg=DarkMagenta guifg=DarkMagenta                       |
  \ hi DarkGray    ctermfg=DarkGray    guifg=DarkGray

"----------------------------------------------------------------------------
" copy from vimrc_example.vim
"----------------------------------------------------------------------------
" ファイルを開いたときに以前のポジションに移動する。
autocmd BufReadPost *
  \ if line("'\"") > 1 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

" 最後に保存してから、どのくらい編集したのかの差分を表示する。
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
          \ | wincmd p | diffthis
endif

"----------------------------------------------------------------------------
" その他
"----------------------------------------------------------------------------
"set title
" 編集中のスクリプトを実行する。
command! -nargs=* -complete=file Run :!./% <args><CR>

" CTRL-L をキーマップで使うため、オリジナル動作は CTRL-L 連打とする。
" さらに構文ハイライトのシンクロナイズも行う。
nmap <C-L><C-L> :redraw! \| syntax sync fromstart<CR>
"----------------------------------------------------------------------------
" プラグイン設定
"----------------------------------------------------------------------------
" [MultipleSearch]
"let MultipleSearchMaxColors=7
"let MultipleSearchColorSequence="red,blue,green,magenta,cyan,gray,brown"
"let MultipleSearchTextColorSequence="white,white,black,white,black,black,black"

" [CtrlP]
let g:ctrlp_map = '<C-L><C-P>'

" [vim-multiple-cursors]
let g:multi_cursor_start_key = 'g<C-L><C-N>'
let g:multi_cursor_start_word_key='<C-L><C-N>'

" [NERD Tree]
map <C-L><C-F> :NERDTreeToggle<CR>

" for vim-airline
set laststatus=2
" vim:filetype=vim
